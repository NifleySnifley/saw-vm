import csv

HEADER_FILE_TEMPLATE = """\
/**
 * opcode.h
 *
 * This file is auto-generated by the script 'scripts/opcode_gen.py'.
 *
 * Please do not modify it by hand.
 *
 */

#ifndef OPCODE_H
#define OPCODE_H

#include <stdint.h>
typedef uint8_t opcode_t;

#include "vm.h"

/**
 * A string array of all opcode names.
 */
static const char *OPCODE_NAMES[] = {
{{opcode_names}}
};

/**
 * The smallest possible value for an opcode.
 */
#define OPCODE_MIN {{opcode_min}}

/**
 * The largest possible value for an opcode.
 */
#define OPCODE_MAX {{opcode_max}}

{{opcodes}}

/**
 * Functions to execute each opcode.
 * 
 * Not all of these will be implemented, as some are inline.
 */
{{opcode_functions}}

/**
 * Executed when the opcode is not known.
 */
void saw_insn_unknown(vm_t *vm, opcode_t opcode);

/**
 * Runs an instruction
 */
void saw_insn(vm_t *vm, opcode_t opcode);

#endif
"""

SOURCE_FILE_TEMPLATE = """\
/**
 * opcode.c
 *
 * This file is auto-generated by the script 'scripts/opcode_gen.py'.
 *
 * Please do not modify it by hand.
 *
 */
#include "opcode.h"

inline void saw_insn(vm_t *vm, opcode_t opcode) {
	switch(opcode) {
{{cases}}
		default:
			saw_insn_unknown(vm, opcode);
			break;
	}
}
"""

OPCODE_TEMPLATE = """\
/**
 * {{opcode}}
 * 
 * {{details}}
 */
#define OP_{{opcode}} {{value}}

"""

OPCODE_CASE_TEMPLATE = """\
        case {{label}}:
            {{function}}(vm);
            break;
"""

with open("opcodes.csv", "r", encoding='utf-8') as fp:
    opcodes = [opcode for opcode in csv.DictReader(fp)]

    opcodes_text = ""
    opcode_names = ""
    opcode_functions = ""
    opcode_cases = ""

    for i, opcode in enumerate(opcodes):
        opcodes_text += OPCODE_TEMPLATE.replace("{{opcode}}", opcode['opcode'].upper()).replace(
            "{{details}}", opcode['details']).replace("{{value}}", hex(i))

        if i == len(opcodes) - 1:
            opcode_names += f"\t\"{opcode['opcode']}\""
        else:
            opcode_names += f"\t\"{opcode['opcode']}\",\n"

        opcode_functions += f"void saw_insn_{opcode['opcode']}(vm_t *vm);\n"
        opcode_cases += OPCODE_CASE_TEMPLATE.replace("{{label}}", "OP_" + opcode['opcode'].upper(
        )).replace("{{function}}", f"saw_insn_{opcode['opcode']}")

    templateSpaghetti = lambda s : s.replace("{{opcodes}}", opcodes_text).replace("{{opcode_names}}", opcode_names).replace(
            "{{opcode_min}}", str(0)).replace("{{opcode_max}}", str(len(opcodes) - 1)).replace("{{opcode_functions}}", opcode_functions).replace("{{cases}}", opcode_cases)

    with open("include/opcode.h", "w", encoding="utf-8") as fp:
        fp.write(templateSpaghetti(HEADER_FILE_TEMPLATE))
    with open("src/opcode.c", "w", encoding="utf-8") as fp:
        fp.write(templateSpaghetti(SOURCE_FILE_TEMPLATE))
